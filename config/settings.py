"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/

Deployment checklist: https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/.
"""

from pathlib import Path

# pulls env vars from .env file
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = config("DJANGO_SECRET_KEY", cast=str)
DEBUG = config("DJANGO_DEBUG", cast=bool)
ALLOWED_HOSTS = [host for host in config("DJANGO_ALLOWED_HOSTS", cast=str).split(",") if host != ""]
MEDIA_ROOT = config("DJANGO_MEDIA_ROOT", cast=str)
STATIC_ROOT = config("DJANGO_STATIC_ROOT", cast=str)
GDAL_LIBRARY_PATH = config("GDAL_LIBRARY_PATH", cast=str)
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": config("POSTGRES_DATABASE_NAME", cast=str),
        "USER": config("POSTGRES_DATABASE_USERNAME", cast=str),
        "PASSWORD": config("POSTGRES_DATABASE_PASSWORD", cast=str),
        "HOST": config("POSTGRES_DATABASE_HOST", cast=str),
        "PORT": config("POSTGRES_DATABASE_PORT", cast=str),
    }
}
DEPLOY_DOMAIN_NAME = config("DEPLOY_DOMAIN_NAME", cast=str)
DEPLOY_LOGS_DIR = config("DEPLOY_LOGS_DIR", cast=str)
DEPLOY_GITHUB_REPO = config("DEPLOY_GITHUB_REPO", cast=str)
DEPLOY_GITHUB_WEBHOOK_SECRET = config("DEPLOY_GITHUB_WEBHOOK_SECRET", cast=str)
DEPLOY_GUNICORN_SOCKET_PATH = config("DEPLOY_GUNICORN_SOCKET_PATH", cast=str)
DEPLOY_NGINX_CONFIG_PATH = config("DEPLOY_NGINX_CONFIG_PATH", cast=str)
DEPLOY_NGINX_ENABLED_PATH = config("DEPLOY_NGINX_ENABLED_PATH", cast=str)
DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440 * 10  # 25 MB

# Application definition
INSTALLED_APPS = [
    # default django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # RUSH apps
    "rush",
    # RUSH dependencies
    "django_summernote",  # Rich text fields + editor
    "graphene_django",  # GraphQL support
    "simple_history",  # Simple changelog + diff for select models
    "leaflet",  # Leaflet Django integration
    "colorfield",  # Django Admin colorpicker UI
    "corsheaders",  # CORS headers for frontend on different origin
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Custom context processors (inject context variables into every template by default).
                "rush.context_processors.base_media_url",
                "rush.context_processors.base_static_url",
            ],
        },
    },
]


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "default": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["default"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

WSGI_APPLICATION = "config.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


MEDIA_URL = "/media/"
STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR / "static"]


SITE_NAME = "RUSH Admin"


# Simple history configuration
SIMPLE_HISTORY_HISTORY_ID_USE_UUID = False
SIMPLE_HISTORY_REVERT_DISABLED = False


# Django Leaflet configuration
LEAFLET_CONFIG = {
    "DEFAULT_CENTER": (45.5017, -73.5673),  # Example: Montreal
    "DEFAULT_ZOOM": 12,
    "MIN_ZOOM": 4,
    "MAX_ZOOM": 20,
    "TILES": "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
    "ATTRIBUTION_PREFIX": "Powered by Leaflet",
}

# CORS configuration
CORS_ORIGIN_ALLOW_ALL = DEBUG  # Development
CORS_ALLOWED_ORIGINS = [x for x in str(config("DJANGO_ALLOWED_ORIGINS", cast=str)).split(",") if x != ""]
CORS_ALLOWED_ORIGIN_REGEXES = [
    x for x in str(config("DJANGO_ALLOWED_ORIGIN_REGEXES", cast=str)).split(",") if x != ""
]
CSRF_TRUSTED_ORIGINS = [x for x in str(config("DJANGO_CSRF_TRUSTED_ORIGINS", cast=str)).split(",") if x != ""]
X_FRAME_OPTIONS = "SAMEORIGIN"  # Need cross-origin here for Summernote X-frame injection


# Backblaze configuration for raster images
BACKBLAZE_RASTER_BUCKET_NAME = "rush-webmap-raster"
BACKBLAZE_RASTER_APP_KEY_ID = str(config("BACKBLAZE_RASTER_APP_KEY_ID", cast=str))
BACKBLAZE_RASTER_APP_KEY = str(config("BACKBLAZE_RASTER_APP_KEY", cast=str))
