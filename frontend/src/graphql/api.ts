import { StyleSchema, type Style } from "./schema.js";


/**
 * Something went wrong while making a request to GraphQL.
 */
export class RequestFailed extends Error {
    constructor(message: string){
      super(message);
    }
}


/**
 * The object you're looking for could not be found.
 */
export class NotFound {}


export function test(): Style {
  const result = StyleSchema.safeParse({'drawStroke': true});
  if (!result.success) {
    throw new Error("Invalid style data: " + JSON.stringify(result.error));
  }
  const style: Style = result.data;
  return style;
}

// /**
//  * Basic interface representing a GraphQL model so we can
//  * build named queries on model objects. Models that extend this
//  * interface must name their attributes the same as those automatically
//  * generated by GraphQL, so that they can be used when building queries.
//  */
// interface GraphQLModel {
//     readonly GRAPHQL_SINGLE_MODEL_NAME: string
//     readonly GRAPHQL_ALL_MODEL_NAMES: string
// }

// /**
//  * 
//  * @param modelType the type of GraphQL model to get by ID.
//  * @param modelId the ID of the model to get.
//  * @returns 
//  */
// async function getById<T extends GraphQLModel>(modelType: T, modelId: string): Promise<T | NotFound | GraphQLQueryFailed> {
    
//     function buildQueryString(): string {
//         const fields = Object.keys(modelType)
//             .filter((key) => key !== "GRAPHQL_SINGLE_MODEL_NAME" && key !== "GRAPHQL_ALL_MODEL_NAMES")
//             .join("\n");
//         const query = `
//             query ($id: UUID!) {
//                 $modelName(id: $id) {
//                     $fieldss
//                 }
//             }
//         `;
//         return JSON.stringify({
//             query,
//             variables: {
//                 id: modelId,
//                 modelName: modelType.GRAPHQL_SINGLE_MODEL_NAME,
//                 fields: fields,
//             },
//         });
//     }
    
//     const queryString = buildQueryString();
//     console.log("Query string is: " + queryString);
    
//     const response = await fetch("/graphql/", {
//         method: "POST",
//         headers: {
//             "Content-Type": "application/json",
//             "Accept": "application/json",
//             // TODO Add CSRF token here
//         },
//         body: queryString,
//     });
    
//     const responseJson = await response.json();
//     if (200 !== response.status){
//         // HTTP status error
//         return new GraphQLQueryFailed(responseJson.errors);
//     }
    
//     const modelData: Object = responseJson?.data[modelType.GRAPHQL_SINGLE_MODEL_NAME];
//     if (modelData === null || modelData === undefined){
//         // no model data on query response
//         return NotFound
//     }

//     // if we have some model data, then try to construct the model object

// }

// /**
//  * Get "Style" data for a single object.
//  * @param styleModelId the Django "Style" model id to fetch.
//  * @returns Style data for the given object.
//  */
// export async function getStyleData(styleModelId: string): Promise<Style | StyleNotFound> {
//     const stylesOnLayerQuery = `
//         query ($id: UUID!) {
//             style(id: $id) {
//                 drawStroke
//                 strokeColor
//                 strokeWeight
//                 strokeOpacity
//                 strokeLineCap
//                 strokeLineJoin
//                 strokeDashArray
//                 strokeDashOffset
//                 drawFill
//                 fillColor
//                 fillOpacity
//             }
//         }
//     `;
//     const style = await queryGraphQL(
//         JSON.stringify({
//             query: stylesOnLayerQuery,
//             variables: {id: styleModelId},
//         }
//     ));
//     if (style?.data?.style === null || style?.data?.style === undefined){
//         return new StyleNotFound();
//     }
//     const styleData = style.data.style;
//     return new Style(
//         styleData.drawStroke,
//         styleData.strokeColor,
//         styleData.strokeWeight,
//         styleData.strokeOpacity,
//         styleData.strokeLineCap,
//         styleData.strokeLineJoin,
//         styleData.strokeDashOffset,
//         styleData.drawFill,
//         styleData.fillColor,
//         styleData.fillOpacity,
//     );
// }
