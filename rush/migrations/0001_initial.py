# Generated by Django 5.1.7 on 2025-06-25 18:37

import colorfield.fields
import django.db.models.deletion
import rush.models.map
import rush.models.validators
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DeployLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "In Progress"),
                            ("failed", "Failed"),
                            ("succeeded", "Succeeded"),
                        ],
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="InitiativeTag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="MapData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("geojson", "Geojson"),
                            ("open_green_map", "Open Green Map"),
                            ("esri_feature_server", "Esri Feature Server"),
                            ("generic_rest", "Generic Rest"),
                        ],
                        max_length=255,
                    ),
                ),
                ("geojson", models.JSONField(blank=True, null=True)),
                (
                    "ogm_map_id",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "feature_url_template",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "icon_url_template",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "image_url_template",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
            ],
            options={
                "verbose_name_plural": "Map Data",
            },
        ),
        migrations.CreateModel(
            name="Style",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "draw_stroke",
                    models.BooleanField(
                        help_text="Check this box when you want to draw the line. Unchecking this box, for example, will remove the borders from a polygon."
                    ),
                ),
                (
                    "stroke_color",
                    colorfield.fields.ColorField(
                        default="#FFFFFF",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
                (
                    "stroke_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1"),
                        max_digits=10,
                        verbose_name="Thickness",
                    ),
                ),
                (
                    "stroke_opacity",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1"),
                        max_digits=5,
                        verbose_name="Transparency",
                    ),
                ),
                (
                    "stroke_line_cap",
                    models.CharField(
                        choices=[
                            ("butt", "Butt"),
                            ("round", "Round"),
                            ("square", "Square"),
                        ],
                        default="round",
                        help_text="The shape of the end of a stroke. Options: butt, round, or square.",
                        max_length=32,
                    ),
                ),
                (
                    "stroke_line_join",
                    models.CharField(
                        choices=[
                            ("arcs", "Arcs"),
                            ("bevel", "Bevel"),
                            ("miter", "Miter"),
                            ("miter-clip", "Miter Clip"),
                            ("round", "Round"),
                        ],
                        default="round",
                        help_text="The shape used to join two lines. Options: arcs, bevel, miter, miter clip, or round.",
                        max_length=32,
                    ),
                ),
                (
                    "stroke_dash_array",
                    models.CharField(
                        blank=True,
                        help_text="The pattern of dashes and gaps for the outline, e.g., '5 5' for 5 pixel long lines separated by 5 pixels of whiespace. Only digits and whitespace are allowed (e.g., '12 34 56')",
                        max_length=32,
                        null=True,
                        validators=[
                            rush.models.map.validate_only_integers_and_whitespace
                        ],
                    ),
                ),
                (
                    "stroke_dash_offset",
                    models.CharField(
                        blank=True,
                        help_text="Offset where the dash pattern starts along the outline path.",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "draw_fill",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box if you want to fill the polygon.",
                    ),
                ),
                (
                    "fill_color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default="#FFFFFF",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                    ),
                ),
                (
                    "fill_opacity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        default=Decimal("1"),
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "fill_rule",
                    models.CharField(
                        blank=True,
                        choices=[("nonzero", "Nonzero"), ("evenodd", "Evenodd")],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "draw_marker",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box if you want to draw the marker icon on each point this style is applied to.",
                    ),
                ),
                (
                    "marker_icon",
                    models.FileField(
                        blank=True,
                        help_text="The image that will appear at each point this style is applied to.",
                        null=True,
                        upload_to="marker_icons/",
                        validators=[rush.models.validators.validate_image_or_svg],
                    ),
                ),
                (
                    "marker_icon_opacity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        default=Decimal("1"),
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "marker_background_color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default="#F2F2F2",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Background Color",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalMapData",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4)),
                ("name", models.CharField(db_index=True, max_length=255)),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("geojson", "Geojson"),
                            ("open_green_map", "Open Green Map"),
                            ("esri_feature_server", "Esri Feature Server"),
                            ("generic_rest", "Generic Rest"),
                        ],
                        max_length=255,
                    ),
                ),
                ("geojson", models.JSONField(blank=True, null=True)),
                (
                    "ogm_map_id",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "feature_url_template",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "icon_url_template",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                (
                    "image_url_template",
                    models.CharField(blank=True, max_length=1024, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical map data",
                "verbose_name_plural": "historical Map Data",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalQuestion",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4)),
                ("title", models.CharField(max_length=255)),
                ("image", models.TextField(blank=True, max_length=100, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question",
                "verbose_name_plural": "historical questions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStyle",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4)),
                ("name", models.CharField(max_length=255)),
                (
                    "draw_stroke",
                    models.BooleanField(
                        help_text="Check this box when you want to draw the line. Unchecking this box, for example, will remove the borders from a polygon."
                    ),
                ),
                (
                    "stroke_color",
                    colorfield.fields.ColorField(
                        default="#FFFFFF",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Color",
                    ),
                ),
                (
                    "stroke_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1"),
                        max_digits=10,
                        verbose_name="Thickness",
                    ),
                ),
                (
                    "stroke_opacity",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1"),
                        max_digits=5,
                        verbose_name="Transparency",
                    ),
                ),
                (
                    "stroke_line_cap",
                    models.CharField(
                        choices=[
                            ("butt", "Butt"),
                            ("round", "Round"),
                            ("square", "Square"),
                        ],
                        default="round",
                        help_text="The shape of the end of a stroke. Options: butt, round, or square.",
                        max_length=32,
                    ),
                ),
                (
                    "stroke_line_join",
                    models.CharField(
                        choices=[
                            ("arcs", "Arcs"),
                            ("bevel", "Bevel"),
                            ("miter", "Miter"),
                            ("miter-clip", "Miter Clip"),
                            ("round", "Round"),
                        ],
                        default="round",
                        help_text="The shape used to join two lines. Options: arcs, bevel, miter, miter clip, or round.",
                        max_length=32,
                    ),
                ),
                (
                    "stroke_dash_array",
                    models.CharField(
                        blank=True,
                        help_text="The pattern of dashes and gaps for the outline, e.g., '5 5' for 5 pixel long lines separated by 5 pixels of whiespace. Only digits and whitespace are allowed (e.g., '12 34 56')",
                        max_length=32,
                        null=True,
                        validators=[
                            rush.models.map.validate_only_integers_and_whitespace
                        ],
                    ),
                ),
                (
                    "stroke_dash_offset",
                    models.CharField(
                        blank=True,
                        help_text="Offset where the dash pattern starts along the outline path.",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "draw_fill",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box if you want to fill the polygon.",
                    ),
                ),
                (
                    "fill_color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default="#FFFFFF",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                    ),
                ),
                (
                    "fill_opacity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        default=Decimal("1"),
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "fill_rule",
                    models.CharField(
                        blank=True,
                        choices=[("nonzero", "Nonzero"), ("evenodd", "Evenodd")],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "draw_marker",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box if you want to draw the marker icon on each point this style is applied to.",
                    ),
                ),
                (
                    "marker_icon",
                    models.TextField(
                        blank=True,
                        help_text="The image that will appear at each point this style is applied to.",
                        max_length=100,
                        null=True,
                        validators=[rush.models.validators.validate_image_or_svg],
                    ),
                ),
                (
                    "marker_icon_opacity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        default=Decimal("1"),
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "marker_background_color",
                    colorfield.fields.ColorField(
                        blank=True,
                        default="#F2F2F2",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Background Color",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical style",
                "verbose_name_plural": "historical styles",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Initiative",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="initiative_images/"
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                (
                    "tags",
                    models.ManyToManyField(
                        related_name="initiatives", to="rush.initiativetag"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Layer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "map_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="rush.mapdata"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalLayer",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "map_data",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="rush.mapdata",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical layer",
                "verbose_name_plural": "historical layers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="question_images/"
                    ),
                ),
                ("initiatives", models.ManyToManyField(to="rush.initiative")),
                (
                    "questions",
                    models.ManyToManyField(related_name="questions", to="rush.layer"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalQuestionTab",
            fields=[
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4)),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="rush.question",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question tab",
                "verbose_name_plural": "historical question tabs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="QuestionTab",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                (
                    "question",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tabs",
                        to="rush.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StylesOnLayer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("feature_mapping", models.TextField(default="true")),
                (
                    "layer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="rush.layer"
                    ),
                ),
                (
                    "style",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="rush.style"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="layer",
            name="styles",
            field=models.ManyToManyField(through="rush.StylesOnLayer", to="rush.style"),
        ),
    ]
