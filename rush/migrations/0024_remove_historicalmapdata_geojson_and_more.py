# Generated by Django 5.1.7 on 2025-09-16 20:01
# Edited by Samuel Morris on September 16th, 2025.

import django.db.models.deletion
from django.db import migrations, models


def forward_move_geojson_field_data_to_geojson_provider_model(apps, schema_editor):
    """
    Any existing GeoJson data in the MapData object needs to move into the GeoJsonProvider
    model which will now be related to MapData as a foreign-key.
    """
    print("\nStarting MapData geojson forward migration to the GeoJsonProvider model...")
    MapData = apps.get_model("rush", "MapData")
    GeoJsonProvider = apps.get_model("rush", "GeoJsonProvider")
    for map_data in MapData.objects.all():
        data = map_data.geojson
        provider = map_data.provider
        if provider == "geojson":
            print(f"Migrating <MapData {map_data.id}> geojson field to GeoJsonProvider model...")
            if data is None:
                print(
                    f"WARNING: Deleting <MapData {map_data.id}> because it has a GeoJson provider but no geojson data!"
                )
            # Migrate data
            map_data.geojson_provider = GeoJsonProvider.objects.create(geojson=data)
            map_data.geojson = None
            map_data.full_clean()
            map_data.save()
        else:
            print(f"Skipping <MapData {map_data.id}> because it's provider is {provider}...")
    print("Finished MapData geojson forward migration to the GeoJsonProvider model!")


def reverse_move_geojson_provider_data_to_geojson_field(apps, schema_editor):
    """
    Reverse migration will put back any data from GeoJsonProvider into MapData's geojson field.
    """
    print("\nStarting MapData reverse migration from the GeoJsonProvider model to geojson field...")
    MapData = apps.get_model("rush", "MapData")
    for map_data in MapData.objects.all():
        provider = map_data.provider
        if provider == "geojson":
            print(f"Migrating <MapData {map_data.id}> GeoJsonProvider model backwards to geojson field ...")
            if map_data.geojson_provider.geojson is None:
                print(
                    f"WARNING: Skipping <MapData {map_data.id}> because it has a GEOJSON provider selected but the foreign key object's geojson field is None!"
                )
            # Migrate data
            map_data.geojson = map_data.geojson_provider.geojson
            # I'm setting None without deleting the object because Django complains. I think it's alright to leave this here even
            # though it will cause hanging GeoJsonProvider objects while moving backwards between rush migrations 0023 and 0024,
            # since backwards migrations are mainly for compatibility/development and not about data preservation.
            map_data.geojson_provider = None
            map_data.full_clean()
            map_data.save()
        else:
            print(f"Skipping <MapData {map_data.id}> because it's provider is {provider}...")
    print("Finished MapData reverse migration from the GeoJsonProvider model to geojson field!")


class Migration(migrations.Migration):

    dependencies = [
        ("rush", "0023_geojsonprovider"),
    ]

    operations = [
        migrations.AddField(
            model_name="mapdata",
            name="geojson_provider",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rush.geojsonprovider",
            ),
        ),
        migrations.RunPython(
            code=forward_move_geojson_field_data_to_geojson_provider_model,
            reverse_code=reverse_move_geojson_provider_data_to_geojson_field,
        ),
        migrations.RemoveField(
            model_name="mapdata",
            name="geojson",
        ),
        # Historical stuff, not really important
        migrations.RemoveField(
            model_name="historicalmapdata",
            name="geojson",
        ),
        migrations.AddField(
            model_name="historicalmapdata",
            name="geojson_provider",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="rush.geojsonprovider",
            ),
        ),
    ]
