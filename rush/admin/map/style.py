from django import forms
from django.contrib import admin
from django.utils.safestring import mark_safe
from simple_history.admin import SimpleHistoryAdmin

from rush import models


class StyleForm(forms.ModelForm):

    class Meta:
        model = models.Style
        fields = [
            "stroke_color",
            "stroke_weight",
            "stroke_opacity",
            "stroke_line_cap",
            "stroke_line_join",
            "stroke_dash_array",
            "stroke_dash_offset",
            # name at end of submission. Ifeel like people will want to create the style, and then name it
            # after they have a solid idea of what it will look like, but that's just me.
            "draw_stroke",
            "name",
        ]
        widgets = {
            "stroke_weight": forms.NumberInput(
                attrs={
                    "type": "range",
                    "min": "0",
                    "max": "15",
                    "step": "1",
                    "oninput": 'document.getElementById("id_stroke_weight").innerHTML = this.value',
                }
            ),
        }

    class Media:
        js = ["style_preview.js"]


@admin.register(models.Style)
class StyleAdmin(SimpleHistoryAdmin):
    form = StyleForm
    readonly_fields = ["style_preview"]
    exclude = ["id"]

    def style_preview(self, obj):
        """
        Readonly field that previews the style while it's being changed or created.
        The `style_preview.js` file hooks into the HTML element generated by this function.
        """
        return mark_safe('<div id="style_preview"></div>')

    # TODO: Admin.display this description
    style_preview.short_description = "Live Style Preview"
